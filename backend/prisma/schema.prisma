generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ConsultationStatus {
  DRAFT
  SCHEDULED
  WAITING
  ACTIVE
  COMPLETED
  CANCELLED
  TERMINATED_OPEN
}

enum InvitationStatus {
  PENDING
  USED
  EXPIRED
  REVOKED
}


model User {
  id                 Int                        @id @default(autoincrement())
  role               UserRole
  firstName          String                     @db.VarChar(100)
  lastName           String                     @db.VarChar(100)
  email              String                     @unique @db.VarChar(255)
  password           String                     @db.VarChar(255)
  temporaryAccount   Boolean                    @default(false)
  phoneNumber        String?                    @db.VarChar(20)
  country            String?                    @db.VarChar(100)
  sex                UserSex?
  status             UserStatus                 @default(NOT_APPROVED)
  createdAt          DateTime                   @default(now())
  updatedAt          DateTime                   @updatedAt
  acceptedAt         DateTime?
  termId             Int?
  termVersion        Float                      @default(0.00)
  term               Terms?                     @relation(fields: [termId], references: [id])
  Participant        Participant[]
  OrganizationMember OrganizationMember[]
  GroupMember        GroupMember[]
  Message            Message[]
  languages          UserLanguage[]
  specialities       UserSpeciality[]
  availability       PractitionerAvailability[] @relation("PractitionerAvailability")
  timeSlots          TimeSlot[]                 @relation("PractitionerTimeSlots")
  Consultation       Consultation[]
  ConsultationRating ConsultationRating[]
  UserNotificationSetting UserNotificationSetting?

  @@map("users")
  MessageReadReceipt MessageReadReceipt[]
  MediaPermissionStatus MediaPermissionStatus[]
  ConsultationInvitesCreated ConsultationInvitation[] @relation("InvitesCreatedBy")
  ConsultationInvitesReceived ConsultationInvitation[] @relation("InvitedUser")
  MediaEvent         MediaEvent[]
  messagesRead       Message[]  @relation("MessageReadBy")
}
model UserNotificationSetting {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id])
  enabled     Boolean  @default(true)   // toggle all notifications
  phone       String?  @db.VarChar(20)  // preferred phone for notifications
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("user_notification_settings")
}


enum UserRole {
  PATIENT
  PRACTITIONER
  ADMIN
  EXPERT
  GUEST
}

enum UserSex {
  MALE
  FEMALE
  OTHER
}

enum UserStatus {
  APPROVED
  NOT_APPROVED
}

model Organization {
  id             Int      @id @default(autoincrement())
  name           String   @unique @db.VarChar(255)
  logo           String?
  primaryColor   String?
  footerMarkdown String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  members OrganizationMember[]
  groups  Group[]
  terms   Terms[]

  @@map("organizations")
}

enum OrgMemberRole {
  ADMIN
  MEMBER
}

model OrganizationMember {
  id             Int           @id @default(autoincrement())
  organizationId Int
  userId         Int
  role           OrgMemberRole @default(MEMBER)
  joinedAt       DateTime      @default(now())

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("organization_members")
}

model Group {
  id                             Int      @id @default(autoincrement())
  organizationId                 Int
  name                           String
  description                    String?
  sharedOnlyIncomingConsultation Boolean  @default(false)
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt

  // Relations
  organization  Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members       GroupMember[]
  consultations Consultation[]

  @@map("groups")
}

model GroupMember {
  id       Int      @id @default(autoincrement())
  groupId  Int
  userId   Int
  joinedAt DateTime @default(now())

  // Relations
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@map("group_members")
}

model Language {
  id   Int    @id @default(autoincrement())
  name String @unique

  users UserLanguage[]

  @@map("language")
}

model UserLanguage {
  id         Int @id @default(autoincrement())
  userId     Int
  languageId Int

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  language Language @relation(fields: [languageId], references: [id], onDelete: Cascade)

  @@unique([userId, languageId])
  @@map("user_language")
}

model Speciality {
  id   Int    @id @default(autoincrement())
  name String @unique

  users        UserSpeciality[]
  Consultation Consultation[]

  @@map("speciality")
}

model UserSpeciality {
  id           Int @id @default(autoincrement())
  userId       Int
  specialityId Int

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  speciality Speciality @relation(fields: [specialityId], references: [id], onDelete: Cascade)

  @@unique([userId, specialityId])
  @@map("user_speciality")
}

model ConsultationRating {
  id             Int      @id @default(autoincrement())
  consultationId Int      @unique
  patientId      Int
  rating         Int
  comment        String?
  createdAt      DateTime @default(now())

  consultation Consultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  patient      User         @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@map("consultation_rating")
}

//  Add the new models/enums that is necessary for consultation remainders

enum MessageService {
  SMS
  EMAIL
  WHATSAPP
  MANUALLY
}

model Consultation {
  id                   Int                @id @default(autoincrement())
  scheduledDate        DateTime?
  createdAt            DateTime?
  startedAt            DateTime?
  closedAt             DateTime?
  createdBy            Int?
  groupId              Int?
  ownerId              Int?
  specialityId         Int?
  symptoms             String?
  messageService       MessageService?
  waitingParticipants  Int                @default(0)
  practitionerAdmitted Boolean            @default(false)
  whatsappTemplateId   Int?
  status               ConsultationStatus @default(DRAFT)
  deletionScheduledAt  DateTime?
  version              Int                @default(1)
  isDeleted            Boolean            @default(false)
  reminderEnabled      Boolean            @default(true)
  remindersSent        Json?              @default("{}")

  participants           Participant[]
  group                  Group?                   @relation(fields: [groupId], references: [id])
  messages               Message[]
  owner                  User?                    @relation(fields: [ownerId], references: [id])
  speciality             Speciality?              @relation(fields: [specialityId], references: [id])
  MediasoupRouter        MediasoupRouter[]
  timeSlot               TimeSlot?
  DeletedConsultationLog DeletedConsultationLog[]
  rating                 ConsultationRating?
  MediasoupTransport     MediasoupTransport[]
  reminders              ConsultationReminder[]

  @@index([status])
  @@index([ownerId])
  @@map("consultation")
  MediaPermissionStatus MediaPermissionStatus[]
  ConsultationInvitation ConsultationInvitation[]
  MediaEvent             MediaEvent[]
}

model ConsultationInvitation {
  id             String           @id @default(cuid())
  consultationId Int
  consultation   Consultation     @relation(fields: [consultationId], references: [id], onDelete: Cascade)

  invitedUserId  Int?
  invitedUser    User?            @relation("InvitedUser", fields: [invitedUserId], references: [id])

  inviteEmail    String           @db.VarChar(255)  
  name           String?          @db.VarChar(100)  
  notes          String?          
  role           UserRole
  token          String           @unique
  expiresAt      DateTime
  usedAt         DateTime?
  status         InvitationStatus @default(PENDING)

  createdById    Int
  createdBy      User             @relation("InvitesCreatedBy", fields: [createdById], references: [id])

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@map("consultation_invitations")
  @@index([consultationId])
  @@index([inviteEmail])
}

model MediasoupServer {
  id                  String            @id @default(cuid())
  url                 String            @unique
  username            String
  password            String
  maxNumberOfSessions Int               @default(100)
  active              Boolean           @default(false)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  MediasoupRouter     MediasoupRouter[]

  @@map("mediasoup_servers")
}

model MediasoupRouter {
  id             String   @id @default(cuid())
  consultationId Int      @unique
  routerId       String
  serverId       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  consultation Consultation    @relation(fields: [consultationId], references: [id])
  server       MediasoupServer @relation(fields: [serverId], references: [id])

  @@unique([consultationId, serverId])
  @@index([routerId])
  @@map("mediasoup_routers")
}

model MediasoupTransport {
  id             String   @id
  consultationId Int
  type           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  consultation Consultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)

  @@index([consultationId])
  @@map("mediasoup_transports")
}

model MediasoupProducer {
  id             String   @id
  transportId    String
  consultationId Int?
  kind           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([consultationId])
  @@map("mediasoup_producers")
}

model MediasoupConsumer {
  id          String   @id
  transportId String
  producerId  String
  kind        String
  createdAt   DateTime @default(now())

  @@map("mediasoup_consumers")
}

model Participant {
  id           Int       @id @default(autoincrement())
  consultationId Int
  userId       Int
  isActive     Boolean   @default(false)
  isBeneficiary Boolean  @default(false)
  token        String?   @db.VarChar(255)
  joinedAt     DateTime?
  lastSeenAt   DateTime? 
  language     String?   @db.VarChar(50)
  lastActiveAt DateTime?
  inWaitingRoom Boolean  @default(true)
  role         UserRole

 consultation Consultation @relation(fields: [consultationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@unique([consultationId, userId])
  @@index([consultationId, isActive]) 
  @@map("participant")
}

model Message {
  id            Int       @id @default(autoincrement())
  userId        Int
  content       String    @db.Text
  createdAt     DateTime  @default(now())
  editedAt      DateTime? 
  isSystem      Boolean   @default(false)
  senderRole    UserRole?
  consultationId Int
  clientUuid     String 
  mediaUrl      String?   @db.VarChar(2048) 
  mediaType     String?

  readReceipts  MessageReadReceipt[]
  user          User      @relation(fields: [userId], references: [id])
  consultation  Consultation? @relation(fields: [consultationId], references: [id])

  @@index([consultationId])
  @@unique([clientUuid, consultationId, userId])  
  @@map("message")
  User User[] @relation("MessageReadBy")
}

enum Category {
  UTILITY
  MARKETING
  AUTHENTICATION
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  DRAFT
  UNKNOWN
  RECEIVED
}

model Whatsapp_Template {
id             Int      @id @default(autoincrement())
  sid            String?
  friendlyName   String
  language       String
  key            String?
  category       Category?
  contentType    String?
  variables      Json?    @default("{}")
  types          Json?
  url            String?
  actions        Json?
  approvalStatus ApprovalStatus @default(DRAFT)
  rejectionReason String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("whatsapp_templates")
}

model MessageReadReceipt {
  id        Int      @id @default(autoincrement())
  messageId Int
  userId    Int
  readAt    DateTime @default(now())

  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
  @@map("message_read_receipt")
}




model SmsProvider {
  id         Int      @id @default(autoincrement())
  order      Int      @unique
  provider   String?
  prefix     String?
  isWhatsapp Boolean  @default(false)
  isDisabled Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("sms_providers")
}

model Terms {
  id        Int      @id @default(autoincrement())
  language  String
  country   String
  content   String
  version   Float    @default(1.00)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to Organization
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  User           User[]

  @@map("terms")
}

model DeletedConsultationLog {
  id             Int      @id @default(autoincrement())
  consultationId Int
  deletedAt      DateTime @default(now())
  reason         String?

  consultation Consultation @relation(fields: [consultationId], references: [id])

  @@index([consultationId])
  @@map("deleted_consultation_log")
}

model PractitionerAvailability {
  id             Int      @id @default(autoincrement())
  practitionerId Int
  dayOfWeek      Int
  startTime      String
  endTime        String
  slotDuration   Int      @default(30)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  practitioner User @relation("PractitionerAvailability", fields: [practitionerId], references: [id], onDelete: Cascade)

  @@index([practitionerId])
  @@map("practitioner_availability")
}

model TimeSlot {
  id             Int            @id @default(autoincrement())
  practitionerId Int
  date           DateTime
  startTime      String
  endTime        String
  status         TimeSlotStatus @default(AVAILABLE)
  consultationId Int?           @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  practitioner User          @relation("PractitionerTimeSlots", fields: [practitionerId], references: [id], onDelete: Cascade)
  consultation Consultation? @relation(fields: [consultationId], references: [id], onDelete: SetNull)

  @@index([practitionerId, date])
  @@map("time_slots")
}

model MediaPermissionStatus {
  id             Int       @id @default(autoincrement())
  consultationId Int
  userId         Int
  cameraStatus   String    // e.g., "enabled", "disabled", "blocked"
  microphoneStatus String  // e.g., "enabled", "disabled", "blocked"
  updatedAt      DateTime  @updatedAt

  consultation Consultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([consultationId, userId])
}


enum TimeSlotStatus {
  AVAILABLE
  BOOKED
  BLOCKED
}

model MediaEvent {
  id             Int          @id @default(autoincrement())
  consultationId Int
  userId         Int
  type           MediaEventType
  createdAt      DateTime     @default(now())

  consultation Consultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([consultationId])
  @@index([userId])
}

enum MediaEventType {
  USER_JOINED
  USER_LEFT
  CAM_ON
  CAM_OFF
  MIC_ON
  MIC_OFF
}

// tokens
enum TokenType {
  invite
  login
  password_reset
}

enum ReminderStatus {
  PENDING
  SENT
  FAILED
  CANCELLED
}

model ConsultationReminder {
  id             Int            @id @default(autoincrement())
  consultationId Int
  type           String
  scheduledFor   DateTime
  status         ReminderStatus @default(PENDING)
  sentAt         DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  consultation Consultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)

  @@index([consultationId])
  @@index([status])
  @@index([scheduledFor])
  @@map("consultation_reminder")
}
